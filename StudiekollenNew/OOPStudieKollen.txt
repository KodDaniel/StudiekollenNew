
Följande är en kartläggning av vilka OOP-tekniker som Studiekollen använder och var någonstans i projektet som koden befinner sig:

- KeyWordet "BASE. Princip: Anropar medlemmar i parent-class genom keywordet base. Förekommer på föjande ställen:
1. I Dispose-metoden i AccountController.se. Parent-klassen ligger i Controller.cs.
2. I Dispose-metoden i ManageController.se. Parent-klassen ligger i Controller.cs.
3. I Dispose-metoden i TestController.se. Parent-klassen ligger i Controller.cs.

- KeyWordet "OVERRIDE". Princip: Method Overriding means having two methods with same name and same signature [parameters],
one should be in base class and other method should be in derived class [child class]. You can override the functionality...
...of base class to create a same name method with same signature in derived class.
You can achieve method overriding using inheritance.  
Overriding promotes code reuse and separation of concerns in your application.
Förekommer på följande ställen:
1.  Används i samband med Dispose-metoderna som nämnts i samband med keywordet base.
2. Används när vi döper om tabellerna genom att overrida parent-klass-funktionen i DbModelBuilder.
3. Används i samband med CreateUserIdentityAsync i Identityconfig.

- Keywordet "OVERLOADING". Princip: Method Overloading is a type of polymorphism.   
It has several names like sometime you say “Compile Time Polymorphism” or “Static Polymorphism” and sometimes it is called “Early Binding”.
So, all are same with different name. Method Overloading means creating multiple methods in the class having same name but different signatures (Parameters). 
It permits a class, struct, or interface to declare multiple methods with the same name with unique signatures.
We add overloaded methods to eliminate complexity and enhance performance. Overloads can differ based on arguments.
Förekommer på följande ställen:
1. TestController.cs - eller vilken autogenerade view som helst utifrån en modell - är ett bra exempel. Kolla till exempel på...
...create-metoderna. Den första create-metoden är parameterlös medan den andra create-metoden (båda metoderna heter alltså "Create!!!")...
...tar flera argument när den ska binda värden.
2. Ett annat exempel är i ManageController.se från rad 104. Två metoder på rad heter "AddPhoneNumber." Men de skiljs åt...
...genom att de tar olika antal argument och olika typer av argument. 
3. Ytterligare exempel på BASE-konstrukorer finns, men ovanstående 3 exempel ger en bra översikt.


- KeyWordet "CONSTRUCTOR-OVERLOADING". Princip: Som Overloading men med en constructor. 
Anledning till att vi använder oss av constructor overloading är att vi vill göra instansieringen av klassen lättare.  
Se eget OOP-dokument om förtydligande krävs.
Följande exempel finns:
1. Inga just nu?

- KeyWordet "CONSTRUCTOR-CHAINING MED THIS". Princip: Vi slipper upprepa fält i våra konstruktor genom att hänvisa till redan...
..deklarerade konstruktorer. Till skillnad från med "base" och konstruktorer så sker här allt inom en enda klass.
Följande exempel finns: 
1. I identityDBContext1.cs finns ett bra exempel. Från rad 26 till rad 45 har vi tre konstruktorer som använder sig av...
...Constructor-chaining med hjälp av keywordet "this". 
2. I AccountController.cs finns ytterligare ett exempel inom klassen "ChallengeResult". 


- KeyWordet "CONSTRUCTOR-CHAINING MED BASE". Princip: Constructor-chaining med Base Keyword används när vi hänvisar till konstruktor mellan olika klasser (arv). 
Vi behöver denna teknik därför att det är viktigt att tänka på vad som händer bakom kulisserna. 
Tänk om vi har en Studentklass som ärver från en Personklass. När vi skapar ett objekt av studentklassen så händer också saker i Personklassen.
Tänk såhär: Om du skriver “Student s = new Student();” skriver samtidigt - utifrån systemets synvinkel - “Person p = new Person();”.
Förekommer på följande ställen:
1. Används på rad 38 i IdentityConfig.cs där klassen "UserManager" ärver från klassen "UserManager<User>".
Barnklassen - "UserManager" har en konstruktor som tar emot parametern "Store", en parameter som skickas vidare...
...till klassen "UserManager<User>:s konstruktor.
2. Används på rad 94 i Identityconfig.cs där klassen "ApplicationSignInManager" ärver från från "SignInManager<User, string>".
ApplicationSignInManager:s konstruktor skickar vidare värderna "userManager" och "authenticationManager" till pappa-klassen...
..."SignInManager<User, string>", eftersom "SignInManager<User, string>" har en konstruktor som kräver just dessa värden.
3. Används på rad 13 i IdentityModel.cs där klassen "ApplicationDbContext" ärver från klassen "IdentityDbContext<User>".
En connectionstring skickas här till IdentityDbContext<User>:s konstruktor, dvs pappaklassens konstruktur, eftersom det är 
...just den parametern som IdentityDbContext<User>:s konstruktor kräver. NOTERA något inressant här: klassen IdentityDbContext<User>...
...använder sig även av Constructor-Overloading med hjälp av keywordet this. Före den konstruktor som används i redan beskriven...
...Constructor-Chaining så finns en annan (klassens första konstruktur) som tar en "Deafult-Connection"-sträng.
4. Ytterligare exempel på BASE-konstrukorer finns, men ovanstående 3 exempel ger en bra översikt.

- KeyWordet PARTIAL. Princip: Om du använder dig av nyckelordet Partial kan du ha två olika  delar av samma klass i samma namespace. 
Dessa klasser slås då nämligen ihop när programmet körs (när jag klickar på F5). Kom ihåg att klasserna ska ha samma namn.
Följande exempel finns: Exempel finns i Startup.cs tillsammans med Startup.Auth.cs. Klassen är en och samma klass men delas upp...
...i två nämnda filer. Notera att det funkar eftersom klasserna ligger inom samma namespace - "StudiekollenNew" och att de båda...
...har nyckelordet "partial".
2. Partial används också i min HTML-kod och detta speglar en av de stora fördelarna med Partial: When working with automatically...
generated source, code can be added to the class without having to recreate the source file.
For example, Visual Studio separates HTML code for the UI and server side code into two separate files: .aspx and .cs files.

- Keywordet USING. Princip: Keywordet Using säger följande: håll objektet inom det här kodblocket och förstör det sedan.
Följande exempel finns: 
1. I våra HTML-dokument.

- Keywordet ENCAPSULATION. Princip: Handlar om att skydda din data - kapsla in den. I Csharp så används properties och get och set för att kapsla in data.
Det är viktigt att tänka på att för mycket kod ska undvikas i get-blocket. Om kod ska skrivas ska den skrivas i set-blocket. 
“Value” är default-värdet i set-blocket. Följande exempel finns: 
1. I metoden SignInManager i filen AccountController.se på rad  31. 
2. I metoden Usermanager på raderna under.
3. I de tre inlederna metoderna i ManageController.cs

- KeyWordet STATIC. Princip:




- KeyWordet GENERICS. Princip: 
